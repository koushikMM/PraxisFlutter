# This is basic workflow to help you get started with Actions

name: Build,Test Release app to Firebase Hosting
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  beta_ios:
    name: Upload iOS Beta to Firebase App Distribution
    needs: [ build_ios ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: release-ios
      - name: Upload IPA
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
        with:
          appId: ${{secrets.FIREBASE_IOS_APPID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: testers
          file: praxis_flutter.ipa
  build_ios:
    runs-on: macos-latest
    if: "contains(github.event.head_commit.message, 'build_ios')"

    steps:
      - name: Export Release Timestamp
        run: echo "APP_VERSION=release_$(date +'%Y-%m-%d_%H-%m-%S')" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: Create Firebase options from secrets
        id: write_FIREBASE_OPTIONSIos
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'firebase_options.dart'
          fileDir: '/Users/runner/work/PraxisFlutter/PraxisFlutter/lib/'
          encodedString: ${{ secrets.FIREBASE_OPTIONS }}
      - name: Create ExportOptions.plist from secrets
        env:
          ExportOptions: ${{ secrets.ExportOptions }}
        run: |
          # create variables
          PP_PATH=$RUNNER_TEMP/work/PraxisFlutter/ios/ExportOptions.plist
          # import ExportOptions from secrets
          echo -n "$ExportOptions" | base64 --decode --output $PP_PATH
      - name: Create GoogleService-Info.plist from secrets
        id: write_fileGoogleServiceInfoIosPlist
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'GoogleService-Info.plist'
          fileDir: '/Users/runner/work/PraxisFlutter/ios/'
          encodedString: ${{ secrets.GoogleServiceInfo }}
      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.P12_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
      - name: Install the provisioning profile
        env:
          PROVISIONING_CERTIFICATE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          # create variables
          PP_PATH=$RUNNER_TEMP/FlutterPraxisRelease.mobileprovision
          # import provisioning profile from secrets
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: 'Run flutter pub get'
        run: flutter pub get

      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/ExportOptions.plist

      - name: Upload iPA
        uses: actions/upload-artifact@master
        with:
          name: release-ios
          path: build/ios/ipa/*.ipa

  build_deploy_web:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'build_deploy_web')"
    steps:
      - name: Export Release Timestamp
        run: echo "APP_VERSION=release_$(date +'%Y-%m-%d_%H-%m-%S')" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: Create Firebase options from secrets
        id: write_FIREBASE_OPTIONSIos
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'firebase_options.dart'
          fileDir: '/home/runner/work/PraxisFlutter/PraxisFlutter/lib/'
          encodedString: ${{ secrets.FIREBASE_OPTIONS }}
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: 'Run flutter pub get'
        run: flutter pub get

      - name: Enable flutter web
        run: flutter config --enable-web
      - name: 'Build Web App'
        run: flutter build web
      - name: deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
      - name: Deploy to Firebase Hosting
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  beta_apk:
    name: Upload Android Beta to Firebase App Distribution
    needs: [ build_android ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: appbundle-build
      - name: Upload APK
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: testers
          file: app-release.aab
  build_android:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'build_android')"

    steps:
      - name: Export Release Timestamp
        run: echo "APP_VERSION=release_$(date +'%Y-%m-%d_%H-%m-%S')" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: Create Firebase options from secrets
        id: write_FIREBASE_OPTIONSIos
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'firebase_options.dart'
          fileDir: '/home/runner/work/PraxisFlutter/PraxisFlutter/lib/'
          encodedString: ${{ secrets.FIREBASE_OPTIONS }}
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: 'Run flutter pub get'
        run: flutter pub get
      - name: 'Build Android app bundle'
        run: flutter build appbundle
      - name: Upload APK
        uses: actions/upload-artifact@master
        with:
          name: appbundle-build
          path: build/app/outputs/bundle/release
